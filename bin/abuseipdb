#!/usr/bin/env php
<?php

/**
 *     _    _                    ___ ____  ____  ____
 *    / \  | |__  _   _ ___  ___|_ _|  _ \|  _ \| __ )
 *   / _ \ | '_ \| | | / __|/ _ \| || |_) | | | |  _ \
 *  / ___ \| |_) | |_| \__ \  __/| ||  __/| |_| | |_) |
 * /_/   \_\_.__/ \__,_|___/\___|___|_|   |____/|____/
 *
 * This file is part of Kristuff\AbsuseIPDB.
 *
 * (c) Kristuff <contact@kristuff.fr>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @version    0.1.0
 * @copyright  2020 Kristuff
 */

require_once realpath(__DIR__) .'/../vendor/autoload.php';

use Kristuff\AbuseIPDB\ApiManager;
use Kristuff\Mishell\Console;

// define arguments and start our app
$arguments = getopt('glC:d:R:c:m:h', ['config', 'list', 'check:', 'days:', 'report:', 'categories', 'message', 'help']);
AbuseIPDB::start($arguments);

/**
 * Class AbuseIPDB
 * 
 * The main cli program
 */
class AbuseIPDB
{
    /**
     * @var Kristuff\AbuseIPDB\ApiManager $api
     */
    private static $api = null; 

    /**
     * The entry point of our app 
     * 
     * @access public
     * @static
     * @param array $arguments
     * 
     * @return void
     */
    public static function start($arguments)
    {
        // Create en new instance of \ApiManager with the given config file
        self::$api = ApiManager::fromConfigFile(__DIR__ .'/../config/config.json');
    
        // required at least one valid argument
        if ( empty($arguments)){
            self::printBanner();
            self::error('No valid arguments given.');
            self::printHelp();       
            exit(1);
        }

         // prints help ?
         if (self::inArguments($arguments, 'h', 'help')){
            self::printBanner();
            self::printHelp();
            exit(0);
        }

        // prints config ?
        if (self::inArguments($arguments, 'g', 'config')){
            self::printBanner();
            self::printConfig();
            exit(0);
        } 

        // prints catgeories ?
        if (self::inArguments($arguments, 'l', 'list')){
            self::printBanner();
            self::printCategories();
            exit(0);
        } 
        
        // check request ?
        if (self::inArguments($arguments, 'C', 'check')){
            self::checkIP($arguments);
            exit(0);
        }
       
        // report request ?
        if (self::inArguments($arguments, 'R', 'report')){
            self::reportIP($arguments);
            exit(0);
        }

        // no valid arguments given, close program
        self::printBanner();
        self::error('invalid arguments');
        exit(1);
    }

    /**
     * Prints the help
     * 
     * @access protected
     * @static
     * 
     * @return void
     */
    protected static function printHelp()
    {
        Console::log(' ' . Console::text('SYNOPSIS:', 'white', 'underline')); 
        Console::log(' ' . Console::text('    abuseipdb -C ') . 
                           Console::text('ip', 'yellow') . 
                           Console::text(' [-d ' . 
                           Console::text('days', 'yellow') . ']')); 
        Console::log(' ' . Console::text('    abuseipdb -R ' .
                           Console::text('ip', 'yellow') . ' -c ' .
                           Console::text('categories', 'yellow') . ' -m ' .
                           Console::text('message', 'yellow'))); 
        Console::log();    
        Console::log(' ' . Console::text('OPTIONS:', 'white', 'underline')); 
        Console::log();
        Console::log(Console::text('   -h, --help', 'white')); 
        Console::log('       Prints the current help. If given, all next arguments are ignored.', 'lightgrey');
        Console::log();    
        Console::log(Console::text('   -g, --config', 'white')); 
        Console::log('       Prints the current config. If given, all next arguments are ignored.', 'lightgrey');
        Console::log();    
        Console::log(Console::text('   -l, --list', 'white')); 
        Console::log('       Prints the list report categories. If given, all next arguments are ignored.', 'lightgrey');
        Console::log();    
        Console::log(Console::text('   -C, --check ', 'white') . Console::text('ip', 'yellow', 'underline')); 
        Console::log('       Performs a check request for the given IP adress. A valid IPv4 or IPv6 address is required.', 'lightgrey');
        Console::log();    
        Console::log(Console::text('   -d, --days ', 'white') . Console::text('days', 'yellow', 'underline')); 
        Console::log('       For a check request, defines the maxAgeDays. Min is 1, max is 365, default is 30.', 'lightgrey');
        Console::log();    
        Console::log(Console::text('   -R, --report ', 'white') . Console::text('ip', 'yellow', 'underline')); 
        Console::log('       Performs a report request for the given IP adress. A valid IPv4 or IPv6 address is required.', 'lightgrey');
        Console::log();    
        Console::log(Console::text('   -c, --categories ', 'white') . Console::text('categories', 'yellow', 'underline')); 
        Console::log('       For a report request, defines the report category(ies). Categories must be separate by a comma.', 'lightgrey');
        Console::log('       Some catgeries cannot be used alone. A category can be represented by its shortname or by its', 'lightgrey');
        Console::log(Console::text('       id. Use ','lightgrey')  . Console::text('abuseipdb -l', 'white') . Console::text(' to print the categories list.','lightgrey'));
        Console::log();    
        Console::log(Console::text('   -m, --message ', 'white') . Console::text('message', 'yellow', 'underline')); 
        Console::log('       For a report request, defines the message to send with report. Message is required for all', 'lightgrey');
        Console::log('       reports request.', 'lightgrey');
        Console::log();    
    }

    /**
     * Prints the current config
     * 
     * @access protected
     * @static
     * 
     * @return void
     */
    protected static function printConfig()
    {
        // print current config and exit
        $conf = self::$api->getConfig();

        // banner
        Console::log(' ----------------------', 'white');
        Console::log(' Current configuration: ', 'white');
        Console::log(' ----------------------', 'white');
        Console::log();

        // print config
        Console::log('  user_id:[' . Console::text($conf['userId'], 'cyan') . ']');   
        Console::log('  api_key:[' . Console::text($conf['apiKey'], 'cyan') . ']');

        // todo report cat default 

        // todo not used for now
        //   Console::log('  self_ips:');
      
        //  foreach($conf['selfIps'] as $ip){
        //      Console::log('    [' .  Console::text($ip, 'cyan')    . ']');   
        //  }
        
        Console::log();   
    }

    /**
     * Prints the report categories list
     * 
     * @access protected
     * @static
     * 
     * @return void
     */
    protected static function printCategories()
    {
        // banner for report
        Console::log(' -----------------------', 'white');
        Console::log(' Report categories list: ', 'white');
        Console::log(' -----------------------', 'white');
        Console::log();

        // get categories
        $categories = self::$api->getCategories();

        $rowHeaders = [
            // columns names                      column lenght
            Console::text('ShortName', 'lightgrey')      => 15, 
            Console::text('Id', 'lightgrey')             => 5, 
            Console::text('Full name', 'lightgrey')      => 18,
            Console::text('Can be alone?', 'lightgrey')  => 15
        ];

        // table header
        Console::log(' '. Console::tableRowSeparator($rowHeaders)); // saparator            
        Console::log(' '. Console::tableRow($rowHeaders));          // columns headers      
        Console::log(' '. Console::tableRowSeparator($rowHeaders)); // saparator            

        // tables rows
        foreach ($categories as $cat){

            $id = Console::text($cat[1], 'cyan');
            $standalone =  $cat[3] ? Console::text('true', 'lightgreen') :  Console::text('false', 'lightred');
            $shorName = Console::text($cat[0], 'white');
            $fullName = Console::text($cat[2], 'white');

            Console::log(
                ' '. 
                Console::TableRowStart().  
                Console::TableRowCell( $shorName , 15).  
                Console::TableRowCell( $id , 5, Console::ALIGN_CENTER).  
                Console::TableRowCell( $fullName , 18).  
                Console::TableRowCell( $standalone , 15,  Console::ALIGN_CENTER)  
            );
        }

        // table end
        Console::log(' '. Console::tableRowSeparator($rowHeaders)); 
        Console::log();   
    }

    /**
     * Perform a report request 
     * 
     * @access protected
     * @static
     * @param array $arguments
     * 
     * @return void
     */
    protected static function reportIP(array $arguments)
    {
        // make sure ip argument is given
        $ip = self::getArgumentValue($arguments,'R', 'report');
        if (empty($ip)){
            self::error('No valid IP value given.');
            exit(1);
        }

        // make sure categories argument is given
        $cats = self::getArgumentValue($arguments,'c', 'categories');
        if (empty($cats)){
            self::error('Report category was empty. At least on category is required for report requests.');
            exit(1);
        }

        // make sure message argument is given
        $message = self::getArgumentValue($arguments,'m', 'message');
        if (empty($message)){
            self::error('Report message was empty. A message is required for report requests.');
            exit(1);
        }

        // banner for report
        Console::log();
        Console::log(Console::pad('  ', 14 + strlen($ip), '-'), 'white');
        Console::log(Console::text('  Report ip: [', 'white') . Console::text($ip, 'cyan') . Console::text(']', 'white'));
        Console::log(Console::pad('  ', 14 + strlen($ip), '-'), 'white');
        Console::log();
   
        // temporary message
        Console::reLog(Console::text('    waiting for api response', 'white') . Console::text(' ... ', 'green'));

        // ----------------
        // Peforms request 
        // ----------------
        $timeStart = microtime(true); // request startime 
        
        $report = null;
        
        try {
            $report = self::$api->report($ip, $cats, $message);     
        
        } catch (Exception $e) {
            self::error($e->getMessage());
            exit(1);
        }
        
        $timeEnd = microtime(true);  // request end time 
        $time = $timeEnd - $timeStart; // request time

        // done, we clear previous the message. Makes sure we clear the whole line with long string
        Console::reLog('                                                        ');

        // ----------------
        // check for errors
        // ----------------
        if (!isset($report)) {
            self::error('An unexpected error occurred');
            exit(1);
        }
        
        if (isset($report) && isset($report->errors)){
            // top error baadge    
            Console::log(' ' .   Console::text('ERROR','white', 'red'));

            // errors is an array, could have more than one error..
            foreach ($report->errors as $err){
                Console::log(Console::text('   status: [', 'white') . Console::text($err->status, 'red') . Console::text(']', 'white'));    
                Console::log(Console::text('   detail: [', 'white') . Console::text($err->detail, 'red') . Console::text(']', 'white'));    
                if (isset($err->source )){
                    if (isset($err->source->parameter)){
                        Console::text(Console::text('     parameter: [', 'white') . Console::text($err->source->parameter, 'red') . Console::text(']', 'white'));    
                    }
                }
                // separate errors
                if (count($report->errors) > 1){
                    Console::log('   ---');
                }
            }
            Console::log();
            exit(1);
        }
        
        // ----------------------------------------------
        // ✓ Done: print reported IP and confidence score
        // ----------------------------------------------

        // color score
        $score = empty($report->data->abuseConfidenceScore) ? 0 : $report->data->abuseConfidenceScore;
        $scoreforegroundColor = 'green';
        $scoreBackgroundColor = '';

        if (intval($score) > 1 ){
            $scoreforegroundColor = 'black';
            $scoreBackgroundColor = 'yellow';
        } 
        if (intval($score) > 50 ){
            $scoreforegroundColor = 'white';
            $scoreBackgroundColor = 'red';
        } 

        // Print result
        Console::log(Console::text('  ✓ ', 'green') . Console::text(' IP: [' . $ip .'] successfully reported', 'white'));
        Console::log(Console::text('     Confidence score: [' , 'white') . 
                     Console::text($report->data->abuseConfidenceScore, $scoreforegroundColor, $scoreBackgroundColor).
                     Console::text(']', 'white'));
        Console::log();
        self::printFooter($time);

    }

    /**
     * Perform a check request 
     * 
     * @access protected
     * @static
     * @param array $arguments
     * 
     * @return void
     */
    protected static function checkIP($arguments)
    {
        // make sure ip argument is given
        $ip = self::getArgumentValue($arguments,'C', 'check');
        if (empty($ip)){
            self::error('No valid IP value given.');
            exit(1);
        }

        // max age in days 
        $maxAge = 1;

        // check if max age is given 
        if (self::inArguments($arguments,'d', 'days')){
            $maxAge = self::getArgumentValue($arguments,'d', 'days');
        }

        // banner for check
        Console::log();
        Console::log(Console::pad('  ', 13 + strlen($ip), '-'), 'white');
        Console::log(Console::text('  Check ip: [', 'white') . Console::text($ip, 'cyan') . Console::text(']', 'white'));
        Console::log(Console::pad('  ', 13 + strlen($ip), '-'), 'white');
        Console::log();
   
        // temporary message
        Console::reLog(Console::text('    waiting for api response', 'white') . Console::text(' ... ', 'green'));

        // do request 
        $timeStart = microtime(true);                       // request startime 
        $check = self::$api->check($ip, $maxAge, true);     // perform check        // TODO option for verbose
        $timeEnd = microtime(true);                         // request end time 
        $time = $timeEnd - $timeStart;                      // request time

        // done, clean previous message
        Console::reLog('                                                        ');

        // score and data color (depending of abuseConfidenceScore)
        $score = empty($check->data->abuseConfidenceScore) ? 0 : $check->data->abuseConfidenceScore;
        $defaultColor = 'green';
        $scoreforegroundColor = 'green';
        $scoreBackgroundColor = '';

        if (intval($score) > 1 ){
            $defaultColor = 'brown';
            $scoreforegroundColor = 'black';
            $scoreBackgroundColor = 'yellow';
        } 
        if (intval($score) > 50 ){
            $defaultColor = 'lightred';
            $scoreforegroundColor = 'white';
            $scoreBackgroundColor = 'red';
        } 
  
        self::printResult('   Confidence score', $check->data->abuseConfidenceScore, $scoreforegroundColor, $scoreBackgroundColor);
//      self::printResult('   isPublic', $check->data->isPublic, $defaultColor);
//      self::printResult('   ipVersion', $check->data->ipVersion, $defaultColor);
        self::printResult('   Whitelisted', $check->data->isWhitelisted ? 'true': 'false', $defaultColor);
        self::printResult('   Country code', $check->data->countryCode, $defaultColor);
        self::printResult('   Country name', $check->data->countryName, $defaultColor);
        self::printResult('   Usage type', $check->data->usageType, $defaultColor);
        self::printResult('   Domain', $check->data->domain, $defaultColor);
        self::printResult('   Total reports', $check->data->totalReports, $defaultColor);
        self::printResult('   Distinct report users', $check->data->numDistinctUsers, $defaultColor);
        self::printResult('   Last reported at', $check->data->lastReportedAt, $defaultColor);

        if (isset($check->data->reports) && $check->data->reports > 0){
            Console::log('   Last reports:');

            // reset color for last reports
            $defaultColor = 'lightmagenta';
        
            $numberReport = 0;
            foreach ($check->data->reports as $lastReport){
                $numberReport++;

                // todo optIon for max reports
                if ($numberReport === 5) break;

                $categories = [];
                foreach($lastReport->categories as $catId){
                    $categories[] = self::$api->getCategoryNamebyId($catId)[0];
                }
                
                $line  = self::printResult('    -> reported at', $lastReport->reportedAt, $defaultColor, '', false);
                $line .= self::printResult(' by user', $lastReport->reporterId, $defaultColor, '', false);
                $line .= self::printResult(' from', $lastReport->reporterCountryCode  . ' ' . $lastReport->reporterCountryName, $defaultColor, '', false);
                $line .= self::printResult(' with categories', implode(', ', $categories) , $defaultColor, '', false);
                Console::log($line);
            }
        } else {
            $day = $maxAge > 1 ? 'in last'. $maxAge . 'days': 'today';
            Console::log(Console::text('   Not reported ' . $day) . Console::text(' ✓', 'green'));

        }

        // footer
        self::printFooter($time);
    }

    /**
     * Prints/gets a result value 
     * 
     * @access protected
     * @static
     * 
     * @return void|string
     */
    protected static function printResult($text, $value, string $foregroundColor = 'lightred', string $backgroundColor = '', bool $print = true)
    {
        // do not print null/blank values
        if (!empty($value)){

            // new line??
            if ($print){
                Console::log($text .': [' . Console::text($value, $foregroundColor, $backgroundColor) . ']');
            } else {
               return Console::text($text .': [' . Console::text($value, $foregroundColor, $backgroundColor) . ']');
            }
        }
    }

    /**
     * Print app banner
     * 
     * @access protected
     * @static
     * 
     * @return void
     */
    protected static function printBanner()
    {
        Console::log();    
        Console::log(' Kristuff\AbuseIPDB v0.1', 'grey'); 
        Console::log(Console::text(' Made with ', 'grey') . Console::text('♥', 'red') . Console::text(' in France', 'grey')); 
        Console::log(' © 2020 Kristuff', 'grey'); 
        Console::log();    
    }

    /**
     * Print footer banner
     * 
     * @access protected
     * @static
     * 
     * @return void
     */
    protected static function printFooter(string $requestTime)
    {
        Console::log();    
        Console::log('  ---------------------------------------', 'grey');    
        if (!empty($requestTime)){
            Console::log(Console::text('  Request time: ', 'grey') . Console::text($requestTime, 'lightgrey') .  Console::text('', 'grey'));
        }
        Console::log(Console::text('  Kristuff\AbuseIPDB ', 'grey') . Console::text('v0.1', 'lightgrey')); 
        Console::log(Console::text('  Made with ', 'grey') . Console::text('♥', 'red') . Console::text(' in France | © 2020 Kristuff', 'grey')); 
        Console::log('  ---------------------------------------', 'grey');    
        Console::log();    
    }

    /**
     * Print an error
     * 
     * @access protected
     * @static
     * @param string    $error      The error message
     * 
     * @return void
     */
    protected static function error($error)
    {
        Console::log(' ' .   Console::text('ERROR','white', 'red') .  Console::text(' -> [', 'white') . Console::text($error, 'red') . Console::text(']', 'white'));    
        Console::log();    
    }

    /**
     * helper function to check if a argument is given
     * 
     * @access protected
     * @static
     * @param array     $arguments      The list of arguments     
     * @param array     $shortArg       The short argument to check
     * @param array     $longArg        The long argument to check
     * 
     * @return bool     True if the short or long argument exist in the arguments array, otherwise false
     */
    protected static function inArguments($arguments, $shortArg, $longArg)
    {
          return array_key_exists($shortArg, $arguments) || array_key_exists($longArg, $arguments);
    }

    /**
     * helper function to get the value of an argument
     *  
     * @access protected
     * @static
     * @param array     $arguments      The list of arguments     
     * @param array     $shortArg       The short argument to check
     * @param array     $longArg        The long argument to check
     * 
     * @return string   
     * 
     */
    protected static function getArgumentValue($arguments, $shortArg, $longArg)
    {
          return array_key_exists($shortArg, $arguments) ? $arguments[$shortArg] : $arguments[$longArg]; 
    }
}

?>