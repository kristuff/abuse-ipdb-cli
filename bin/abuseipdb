#!/usr/bin/env php
<?php

/**
 *     _    _                    ___ ____  ____  ____
 *    / \  | |__  _   _ ___  ___|_ _|  _ \|  _ \| __ )
 *   / _ \ | '_ \| | | / __|/ _ \| || |_) | | | |  _ \
 *  / ___ \| |_) | |_| \__ \  __/| ||  __/| |_| | |_) |
 * /_/   \_\_.__/ \__,_|___/\___|___|_|   |____/|____/
 *
 * This file is part of Kristuff\AbsuseIPDB.
 *
 * (c) Kristuff <contact@kristuff.fr>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @version    0.1.0
 * @copyright  2020 Kristuff
 */

require_once realpath(__DIR__) .'/../vendor/autoload.php';

use Kristuff\AbuseIPDB\ApiManager;
use Kristuff\Mishell\Console;

// define arguments
$arguments = getopt('glC:d:R:c:m:h', ['config', 'list', 'check:', 'days:', 'report:', 'categories', 'message', 'help']);

// start AbuseIPDB program
AbuseIPDB::start($arguments);

/**
 * Class AbuseIPDB
 * 
 * The main cli program
 */
class AbuseIPDB
{
    /**
     * @var Kristuff\AbuseIPDB\ApiManager $api
     */
    private static $api = null; 

    /**
     * The entry point of our app 
     * 
     * @access public
     * @static
     * @param array $arguments
     * 
     * @return void
     */
    public static function start($arguments)
    {
        // hello
        self::printBanner();

        // Create en new instance of \ApiManager with the given config file
        self::$api = ApiManager::fromConfigFile(__DIR__ .'/../config/config.json');
    
        // required at least one valid argument
        if ( empty($arguments)){
            self::error('No valid arguments given.');
            self::printHelp();       
            exit(1);
        }

         // prints help ?
         if (self::inArguments($arguments, 'h', 'help')){
            self::printHelp();
            exit(0);
        }

        // prints config ?
        if (self::inArguments($arguments, 'g', 'config')){
            self::printConfig();
            exit(0);
        } 

        // prints catgeories ?
        if (self::inArguments($arguments, 'l', 'list')){
            self::printCategories();
            exit(0);
        } 
        
        // check request ?
        if (self::inArguments($arguments, 'C', 'check')){
            self::checkIP($arguments);
            exit(0);
        }
       
        // report request ?
        if (self::inArguments($arguments, 'R', 'report')){
            self::reportIP($arguments);
            exit(0);
        }

        // no valid arguments given, close program
        self::error('invalid arguments');
        exit(1);
    }

    /**
     * Prints the help
     * 
     * @access protected
     * @static
     * 
     * @return void
     */
    protected static function printHelp()
    {
        Console::log(' ' . Console::text('SYNOPSIS:', 'white', 'underline')); 
        Console::log(' ' . Console::text('    abuseipdb -C ') . 
                           Console::text('ip', 'yellow') . 
                           Console::text(' [-d ' . 
                           Console::text('days', 'yellow') . ']')); 
        Console::log(' ' . Console::text('    abuseipdb -R ' .
                           Console::text('ip', 'yellow') . ' -c ' .
                           Console::text('categories', 'yellow') . ' -m ' .
                           Console::text('message', 'yellow'))); 
        Console::log();    
        Console::log(' ' . Console::text('OPTIONS:', 'white', 'underline')); 
        Console::log();
        Console::log(Console::text('   -h, --help', 'white')); 
        Console::log('       Prints the current help. If given, all next arguments are ignored.', 'lightgrey');
        Console::log();    
        Console::log(Console::text('   -g, --config', 'white')); 
        Console::log('       Prints the current config. If given, all next arguments are ignored.', 'lightgrey');
        Console::log();    
        Console::log(Console::text('   -l, --list', 'white')); 
        Console::log('       Prints the list report categories. If given, all next arguments are ignored.', 'lightgrey');
        Console::log();    
        Console::log(Console::text('   -C, --check ', 'white') . Console::text('ip', 'yellow', 'underline')); 
        Console::log('       Performs a check request for the given IP adress. A valid IPv4 or IPv6 address is required.', 'lightgrey');
        Console::log();    
        Console::log(Console::text('   -d, --days ', 'white') . Console::text('days', 'yellow', 'underline')); 
        Console::log('       For a check request, defines the maxAgeDays. Min is 1, max is 365, default is 30.', 'lightgrey');
        Console::log();    
        Console::log(Console::text('   -R, --report ', 'white') . Console::text('ip', 'yellow', 'underline')); 
        Console::log('       Performs a report request for the given IP adress. A valid IPv4 or IPv6 address is required.', 'lightgrey');
        Console::log();    
        Console::log(Console::text('   -c, --categories ', 'white') . Console::text('categories', 'yellow', 'underline')); 
        Console::log('       For a report request, defines the report category(ies). Categories must be separate by a comma.', 'lightgrey');
        Console::log('       Some catgeries cannot be used alone. A category can be represented by its shortname or by its', 'lightgrey');
        Console::log(Console::text('       id. Use ','lightgrey')  . Console::text('abuseipdb -l', 'grey') . Console::text(' to print the list','lightgrey'));
        Console::log();    
        Console::log(Console::text('   -m, --message ', 'white') . Console::text('message', 'yellow', 'underline')); 
        Console::log('       For a report request, defines the message to send with report. Message is required for all', 'lightgrey');
        Console::log('       reports request.', 'lightgrey');
        Console::log();    
    }

    /**
     * Prints the current config
     * 
     * @access protected
     * @static
     * 
     * @return void
     */
    protected static function printConfig()
    {
        // print current config and exit
        $conf = self::$api->getConfig();
            
        Console::log(' ' . Console::text('Current configuration:', 'white', 'blue', 'underline'));   
        Console::log();  
        Console::log('  user_id:[' . Console::text($conf['userId'], 'cyan') . ']');   
        Console::log('  api_key:[' . Console::text($conf['apiKey'], 'cyan') . ']');

      // todo report cat default 

        // todo not used for now
      //   Console::log('  self_ips:');
      
      //  foreach($conf['selfIps'] as $ip){
      //      Console::log('    [' .  Console::text($ip, 'cyan')    . ']');   
      //  }
        
      Console::log();   
    }

    /**
     * Prints the report categories list
     * 
     * @access protected
     * @static
     * 
     * @return void
     */
    protected static function printCategories()
    {
        $cats = self::$api->getCategories();

        Console::log(' ' . Console::text('Report categories list:', 'white', 'blue', 'underline'));   
        Console::log();

        $rowHeaders = [

            // columns names (with color..)        column lenght
            Console::text('Id', 'white')            => 2, 
            Console::text('shortName', 'white')     => 15, 
            Console::text('Full name', 'white')     => 20
        ];

        Console::log(' '. Console::tableSeparator($rowHeaders));    // top line             |-----------------------  ...
        Console::log(' '. Console::tableRow($rowHeaders));          // columns headers      | foo     | bar     |---  ...
        Console::log(' '. Console::tableRowSeparator($rowHeaders)); // saparator            |---------|---------|---  ...
         
        // tables rows
        foreach ($cats as $key => $value){
            Console::log(
                ' '. 
                Console::TableRowStart().  
                Console::TableRowCell($value[0] , 2).  
                Console::TableRowCell($key, 15).  
                Console::TableRowCell($value[1] , 20)  
            );
        }

        // table end
        Console::log(' '. Console::tableSeparator($rowHeaders));   // saparator               |-----------------------  ...
        Console::log();   
    }

    /**
     * Perform a report request 
     * 
     * @access protected
     * @static
     * @param array $arguments
     * 
     * @return void
     */
    protected static function reportIP(array $arguments)
    {
        // make sure ip argument is given
        $ip = self::getArgumentValue($arguments,'R', 'report');
        if (empty($ip)){
            self::error('No valid IP value given.');
            exit(1);
        }

        // make sure categories argument is given
        $cats = self::getArgumentValue($arguments,'c', 'categories');
        if (empty($cats)){
            self::error('Report category was empty. At least on category is required for report requests.');
            exit(1);
        }

        // make sure message argument is given
        $message = self::getArgumentValue($arguments,'m', 'message');
        if (empty($message)){
            self::error('Report message was empty. A message is required for report requests.');
            exit(1);
        }

        // banner for report
        Console::log(Console::pad(' ', 14 + strlen($ip), '-'), 'white');
        Console::log(Console::text(' Report ip: [', 'white') . Console::text($ip, 'cyan') . Console::text(']', 'white'));
        Console::log(Console::pad(' ', 14 + strlen($ip), '-'), 'white');
        Console::log();
   
        // temporary message
        Console::reLog(Console::text(' waiting for api response', 'white') . Console::text(' ... ', 'green'));

        // do request 
        $timeStart = microtime(true);                               // request startime 
        
        $report = null;
        
        try {
            $report = self::$api->report($ip, $cats, $message);     // perform check
        
        } catch (Exception $e) {
            self::error($e->getMessage());
            exit(1);
        }
        
        $timeEnd = microtime(true);                             // request end time 
        $time = $timeEnd - $timeStart;                          // request time

        // done, we clear previous the message. Makes sure we clear the whole line with long string
        Console::reLog('                                                        ');

        // ----------------
        // check for errors
        // ----------------
        if (!isset($report)) {
            self::error('An unexpected error occurred');
            exit(1);
        }
        
        if (isset($report) && isset($report->errors)){
            // top error bdage    
            Console::log(' ' .   Console::text('ERROR','white', 'red'));

            // errors is an array, could have more than one error..
            foreach ($report->errors as $err){
                Console::log(Console::text('   status: [', 'white') . Console::text($err->status, 'red') . Console::text(']', 'white'));    
                Console::log(Console::text('   detail: [', 'white') . Console::text($err->detail, 'red') . Console::text(']', 'white'));    
                if (isset($err->source )){
                    if (isset($err->source->parameter)){
                        Console::text(Console::text('     parameter: [', 'white') . Console::text($err->source->parameter, 'red') . Console::text(']', 'white'));    
                    }
                }
                // separate errors
                if (count($report->errors) > 1){
                    Console::log('   ---');
                }
            }
            Console::log();
            exit(1);
        }
        
        // ----------------------------------------------
        // ✓ Done: print reported IP and confidence score
        // ----------------------------------------------

        // color score
        $score = $report->data->abuseConfidenceScore;
        $scoreforegroundColor = 'green';
        $scoreBackgroundColor = '';

        if (intval($score) > 1 ){
            $scoreforegroundColor = 'black';
            $scoreBackgroundColor = 'yellow';
        } 
        if (intval($score) > 50 ){
            $scoreforegroundColor = 'white';
            $scoreBackgroundColor = 'red';
        } 

        // Print result
        Console::log(Console::text('  ✓ ', 'green') . Console::text(' IP: ' . $ip .' successfully reported', 'white'));
        Console::log(Console::text('     Confidence Score: [' , 'white') . 
                     Console::text($report->data->abuseConfidenceScore, $scoreforegroundColor, $scoreBackgroundColor).
                     Console::text(']', 'white'));
        Console::log(Console::text('     Request time [', 'white') . Console::text($time, 'green') . Console::text(']', 'white'));
        Console::log();
    }

    /**
     * Perform a check request 
     * 
     * @access protected
     * @static
     * @param array $arguments
     * 
     * @return void
     */
    protected static function checkIP($arguments)
    {
        // make sure ip argument is given
        $ip = self::getArgumentValue($arguments,'C', 'check');
        if (empty($ip)){
            self::error('No valid IP value given.');
            exit(1);
        }

        // max age in days 
        $maxAge = 1;

        // check if max age is given 
        if (self::inArguments($arguments,'d', 'days')){
            $maxAge = self::getArgumentValue($arguments,'d', 'days');
        }

        // banner for check
        Console::log(Console::pad(' ', 13 + strlen($ip), '-'), 'white');
        Console::log(Console::text(' Check ip: [', 'white') . Console::text($ip, 'cyan') . Console::text(']', 'white'));
        Console::log(Console::pad(' ', 13 + strlen($ip), '-'), 'white');
        Console::log();
   
        // temporary message
        Console::reLog(Console::text(' waiting for api response', 'white') . Console::text(' ... ', 'green'));

        // do request 
        $timeStart = microtime(true);                       // request startime 
        $check = self::$api->check($ip, $maxAge, true);     // perform check        // TODO option for verbose
        $timeEnd = microtime(true);                         // request end time 
        $time = $timeEnd - $timeStart;                      // request time

        // done, clean previous message
        Console::reLog('                                                        ');

        // score and data color (depending of abuseConfidenceScore)
        $score = $check->data->abuseConfidenceScore;
        $defaultColor = 'lightgreen';
        $scoreforegroundColor = 'lightgreen';
        $scoreBackgroundColor = '';

        if (intval($score) > 1 ){
            $defaultColor = 'brown';
            $scoreforegroundColor = 'black';
            $scoreBackgroundColor = 'yellow';
        } 
        if (intval($score) > 50 ){
            $defaultColor = 'lightred';
            $scoreforegroundColor = 'white';
            $scoreBackgroundColor = 'red';
        } 

        self::printResult('   isPublic', $check->data->isPublic, $defaultColor);
        self::printResult('   ipVersion', $check->data->ipVersion, $defaultColor);
        self::printResult('   isWhitelisted', $check->data->isWhitelisted, $defaultColor);
        self::printResult('   abuseConfidenceScore', $check->data->abuseConfidenceScore, $scoreforegroundColor, $scoreBackgroundColor);
        self::printResult('   countryCode', $check->data->countryCode, $defaultColor);
        self::printResult('   countryName', $check->data->countryName, $defaultColor);
        self::printResult('   usageType', $check->data->usageType, $defaultColor);
        self::printResult('   domain', $check->data->domain, $defaultColor);
        self::printResult('   totalReports', $check->data->totalReports, $defaultColor);
        self::printResult('   numDistinctUsers', $check->data->numDistinctUsers, $defaultColor);
        self::printResult('   lastReportedAt', $check->data->lastReportedAt, $defaultColor);
        Console::log();
        Console::log(Console::text(' Request time [', 'lightgrey') . Console::text($time, 'green') . Console::text(']', 'lightgrey'));
        Console::log();
    }

    /**
     * Print a result value 
     * 
     * @access protected
     * @static
     * 
     * @return void
     */
    protected static function printResult($text, $value, $foregroundColor = 'lightred', $backgroundColor = '')
    {
        Console::log('' . $text .': [' . Console::text($value, $foregroundColor, $backgroundColor) . ']');
    }

    /**
     * Print app banner
     * 
     * @access protected
     * @static
     * 
     * @return void
     */
    protected static function printBanner()
    {
        Console::log();    
        Console::log(' Kristuff\AbuseIPDB v0.1', 'grey'); 
        Console::log(Console::text(' Made with ', 'grey') . Console::text('♥', 'red') . Console::text(' in France', 'grey')); 
        Console::log(' © 2020 Kristuff', 'grey'); 
        Console::log();    
    }

    /**
     * Print an error
     * 
     * @access protected
     * @static
     * @param string    $error      The error message
     * 
     * @return void
     */
    protected static function error($error)
    {
        Console::log(' ' .   Console::text('ERROR','white', 'red') .  Console::text(' -> [', 'white') . Console::text($error, 'red') . Console::text(']', 'white'));    
        Console::log();    
    }

    /**
     * helper function to check if a argument is given
     * 
     * @access protected
     * @static
     * @param array     $arguments      The list of arguments     
     * @param array     $shortArg       The short argument to check
     * @param array     $longArg        The long argument to check
     * 
     * @return bool     True if the short or long argument exist in the arguments array, otherwise false
     */
    protected static function inArguments($arguments, $shortArg, $longArg)
    {
          return array_key_exists($shortArg, $arguments) || array_key_exists($longArg, $arguments);
    }

    /**
     * helper function to get the value of an argument
     *  
     * @access protected
     * @static
     * @param array     $arguments      The list of arguments     
     * @param array     $shortArg       The short argument to check
     * @param array     $longArg        The long argument to check
     * 
     * @return string   
     * 
     */
    protected static function getArgumentValue($arguments, $shortArg, $longArg)
    {
          return array_key_exists($shortArg, $arguments) ? $arguments[$shortArg] : $arguments[$longArg]; 
    }

}

?>